
import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map.Entry;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;

/**
 * Creates the Graph Window
 *
 * @author sgavr
 */
public class GraphGUI extends javax.swing.JFrame {

    /**
     * MainPage from where the Graph window was called
     */
    private MainPageGUI mainPage;

    /**
     * Creates a new Graph window
     */
    public GraphGUI(MainPageGUI mainPage) {
        this.mainPage = mainPage;
        initComponents();
        this.errorLabel.setForeground(Color.red);
        this.createTimeSeriesGraph(); // Creates a new graph
        this.updateLabels(); // Updates the labels containing user information
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphSelectionButtonGroup = new javax.swing.ButtonGroup();
        graphPanel = new javax.swing.JPanel();
        exitButton = new javax.swing.JButton();
        recordsRadioButton = new javax.swing.JRadioButton();
        goalsRadioButton = new javax.swing.JRadioButton();
        recordsAndGoalsRadioButton = new javax.swing.JRadioButton();
        viewButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        statsPanel = new javax.swing.JPanel();
        favoriteDrinkLabel = new javax.swing.JLabel();
        weeklyGoalsMetLabel = new javax.swing.JLabel();
        dailyGoalsMetLabel = new javax.swing.JLabel();
        overallGoalsMetLabel = new javax.swing.JLabel();
        averageDailyIntakeLabel = new javax.swing.JLabel();
        recommendedDailyIntakeLabel = new javax.swing.JLabel();
        drinkHolderLabel = new javax.swing.JLabel();
        weeklyGoalsHolderLabel = new javax.swing.JLabel();
        dailyGoalsHolderLabel = new javax.swing.JLabel();
        overallGoalsHolderLabel = new javax.swing.JLabel();
        avarageIntakeHolderLabel = new javax.swing.JLabel();
        recommendedIntakeHolderLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HydroHomie - Progress Graph");

        graphPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 521, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 304, Short.MAX_VALUE)
        );

        exitButton.setText("EXIT");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        graphSelectionButtonGroup.add(recordsRadioButton);
        recordsRadioButton.setText("Records");

        graphSelectionButtonGroup.add(goalsRadioButton);
        goalsRadioButton.setText("Goals");
        goalsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goalsRadioButtonActionPerformed(evt);
            }
        });

        graphSelectionButtonGroup.add(recordsAndGoalsRadioButton);
        recordsAndGoalsRadioButton.setText("Records & Goals");

        viewButton.setText("VIEW");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        statsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        favoriteDrinkLabel.setText("Favourite Common Drink:");

        weeklyGoalsMetLabel.setText("Weekly Goals Met:");

        dailyGoalsMetLabel.setText("Daily Goals Met:");

        overallGoalsMetLabel.setText("Overall % of Goals Met:");

        averageDailyIntakeLabel.setText("Average Daily Water Intake:");

        recommendedDailyIntakeLabel.setText("Recommended Daily Water Intake:");

        javax.swing.GroupLayout statsPanelLayout = new javax.swing.GroupLayout(statsPanel);
        statsPanel.setLayout(statsPanelLayout);
        statsPanelLayout.setHorizontalGroup(
            statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(statsPanelLayout.createSequentialGroup()
                        .addComponent(favoriteDrinkLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(drinkHolderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(statsPanelLayout.createSequentialGroup()
                        .addComponent(weeklyGoalsMetLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(weeklyGoalsHolderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(statsPanelLayout.createSequentialGroup()
                        .addComponent(dailyGoalsMetLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dailyGoalsHolderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(statsPanelLayout.createSequentialGroup()
                        .addComponent(overallGoalsMetLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(overallGoalsHolderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(statsPanelLayout.createSequentialGroup()
                        .addComponent(averageDailyIntakeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(avarageIntakeHolderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(statsPanelLayout.createSequentialGroup()
                        .addComponent(recommendedDailyIntakeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recommendedIntakeHolderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        statsPanelLayout.setVerticalGroup(
            statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(favoriteDrinkLabel)
                    .addComponent(drinkHolderLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weeklyGoalsMetLabel)
                    .addComponent(weeklyGoalsHolderLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dailyGoalsMetLabel)
                    .addComponent(dailyGoalsHolderLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(overallGoalsMetLabel)
                    .addComponent(overallGoalsHolderLabel))
                .addGap(77, 77, 77)
                .addGroup(statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(averageDailyIntakeLabel)
                    .addComponent(avarageIntakeHolderLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recommendedDailyIntakeLabel)
                    .addComponent(recommendedIntakeHolderLabel))
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(521, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(statsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(viewButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(recordsRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(goalsRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(recordsAndGoalsRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(exitButton)))
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recordsRadioButton)
                    .addComponent(goalsRadioButton)
                    .addComponent(recordsAndGoalsRadioButton)
                    .addComponent(viewButton)
                    .addComponent(exitButton))
                .addGap(6, 6, 6)
                .addComponent(errorLabel)
                .addGap(16, 16, 16))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Graph window Returns to the main page window
     *
     * @param evt Event triggering the action
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        this.moveToMainWindow();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void goalsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goalsRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_goalsRadioButtonActionPerformed

    /**
     * Updates the graph displayed, depending on which radio button is selected.
     *
     * @param evt Event triggering the action
     */
    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        if (!this.recordsAndGoalsRadioButton.isSelected() && !this.goalsRadioButton.isSelected() && !this.recordsRadioButton.isSelected()) { // No button is selected
            this.errorLabel.setText("Please select what you would like to view."); // Display error message
        } else {
            this.errorLabel.setText(""); // Delete the error message
            this.createTimeSeriesGraph(); // Create the graph
        }
    }//GEN-LAST:event_viewButtonActionPerformed

    /**
     * Creates and displays the graph depending on which radio button is selected.
     */
    private void createTimeSeriesGraph() {
        JFreeChart timeSeriesChart = ChartFactory.createTimeSeriesChart(
                "Hydration Progress", // Set graph title
                "Date", "Amount (ml)", // Set axis titles (X-axis: Date, Y-Axis: Amount)
                createDataset()); // Creates the graph

        // Costumize how the graph looks:
        XYPlot plot = (XYPlot) timeSeriesChart.getPlot();
        // Set colors for background and gridlines
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);
        plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
        // Display gridlines
        plot.setDomainCrosshairVisible(true);
        plot.setRangeCrosshairVisible(true);

        // Display items in the dataSet using individual points:
        XYItemRenderer r = plot.getRenderer();
        if (r instanceof XYLineAndShapeRenderer) {
            XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) r;
            renderer.setDefaultShapesVisible(true);
            renderer.setDefaultShapesFilled(true);
        }
        this.displayGraph(timeSeriesChart); // Displays the created graph on the window
    }

    /**
     * Creates the Dataset that is used to create the graph.
     *
     * @return Dataset used to create the graph
     */
    private XYDataset createDataset() {
        TimeSeriesCollection dataSet = new TimeSeriesCollection(); // TimeSeriesCollection used to create the graph
        
        ArrayList<Date> dailyGoals = new ArrayList<>(this.mainPage.getUser().dailyGoals.keySet()); // List holding user's set daily goals
        HashMap<Date, Float> dailyVolumes = this.mainPage.getUser().getDailyVolume(); // Hashmap holding the user's records

        
        TimeSeries goalsSeries = new TimeSeries("Goals");
        TimeSeries recordsSeries = new TimeSeries("Records");

        
        // Convert user information into TimeSeries to be used for the graph:
        for (Date d : dailyGoals) { // Populate the goalSeries
            goalsSeries.add(new Day(d), this.mainPage.getUser().dailyGoals.get(d).getGoal());
        }
        for (Entry e : dailyVolumes.entrySet()) { // Populate the recordSeries
            recordsSeries.addOrUpdate(new Day((Date) e.getKey()), (float) e.getValue());
        }

        // Select which TimeSeries to include depending on which radio button is selcted
        if (this.recordsAndGoalsRadioButton.isSelected()) { // Both goals and record Series
            dataSet.addSeries(goalsSeries);
            dataSet.addSeries(recordsSeries);
        } else if (this.goalsRadioButton.isSelected()) { // Just goal Series
            dataSet.addSeries(goalsSeries);
        } else if (this.recordsRadioButton.isSelected()) { // Just record Series
            dataSet.addSeries(recordsSeries);
        }

        return dataSet;
    }

    /**
     * Updates the panel holding the graph.
     *
     * @param lineChart Chart to be displayed on the window
     */
    private void displayGraph(JFreeChart lineChart) {
        ChartPanel chartPanel = new ChartPanel(lineChart);
        chartPanel.setPreferredSize(new Dimension(500, 300)); // Set the graph size
        this.graphPanel.setLayout(new java.awt.BorderLayout()); // Reset the panel
        this.graphPanel.add(chartPanel); // Add the graph to the panel's contents
        this.graphPanel.validate(); // Update the panel
    }

    /**
     * Update the values holding the user's information. Labels: 1. Favourite
     * Drink 2. Number of daily goals user has met 3. Number of weekly goals
     * user has met 4. Percentage of goals user has met 5. Average daily intake
     * volume 6. Recommended daily intake volume
     */
    private void updateLabels() {
        drinkHolderLabel.setText(this.mainPage.getUser().getFavouriteDrink());

        // Goals met:
        dailyGoalsHolderLabel.setText(String.valueOf(this.mainPage.getUser().getDailyGoalsMet())); // daily
        weeklyGoalsHolderLabel.setText(String.valueOf(this.mainPage.getUser().getWeeklyGoalsMet())); // weekly

        overallGoalsHolderLabel.setText(this.mainPage.getUser().percentageOfGoalsCompleted() + "%"); // % of met goals (daily and weekly) vs set goals

        avarageIntakeHolderLabel.setText(String.valueOf(this.mainPage.getUser().getAverageDailyVolume()) + "ml"); // Average daily water intake
        recommendedIntakeHolderLabel.setText("2000ml"); // Recommended water intake
    }

    /**
     * Closes the graph window and moves back to the main window.
     */
    private void moveToMainWindow() {
        this.setVisible(false);
        this.mainPage.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphGUI(new MainPageGUI()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel avarageIntakeHolderLabel;
    private javax.swing.JLabel averageDailyIntakeLabel;
    private javax.swing.JLabel dailyGoalsHolderLabel;
    private javax.swing.JLabel dailyGoalsMetLabel;
    private javax.swing.JLabel drinkHolderLabel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel favoriteDrinkLabel;
    private javax.swing.JRadioButton goalsRadioButton;
    private javax.swing.JPanel graphPanel;
    private javax.swing.ButtonGroup graphSelectionButtonGroup;
    private javax.swing.JLabel overallGoalsHolderLabel;
    private javax.swing.JLabel overallGoalsMetLabel;
    private javax.swing.JLabel recommendedDailyIntakeLabel;
    private javax.swing.JLabel recommendedIntakeHolderLabel;
    private javax.swing.JRadioButton recordsAndGoalsRadioButton;
    private javax.swing.JRadioButton recordsRadioButton;
    private javax.swing.JPanel statsPanel;
    private javax.swing.JButton viewButton;
    private javax.swing.JLabel weeklyGoalsHolderLabel;
    private javax.swing.JLabel weeklyGoalsMetLabel;
    // End of variables declaration//GEN-END:variables
}
