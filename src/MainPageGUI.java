
import java.awt.Color;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 * Creates the main page window, from where all other pages are called.
 *
 * @author sgavr
 */
public class MainPageGUI extends javax.swing.JFrame {

    /**
     * The UserData for the current user
     */
    private UserData user;
    /**
     * Table holding all of the user's records
     */
    private DefaultTableModel recordsTable;

    /**
     * Creates new form MainPageGUI
     */
    public MainPageGUI() {
        // Initialize components:
        initComponents();
        this.editButton.setVisible(false);
        this.deleteButton.setVisible(false);
        this.RecordsTable.setAutoCreateRowSorter(true);

        user = UserData.FromFile("data/data.txt"); // Read user information from the file
        recordsTable = (DefaultTableModel) this.RecordsTable.getModel(); // Add the user's records to the displayed records table
        updateUserData();
        this.RecordsTable.getSelectionModel().addListSelectionListener(onSelection); // Allow for individual table entry manipulation

    }

    /**
     * If an entry in the Records table is selected, display manipulation
     * options (Edit or Delete the entry).
     */
    private ListSelectionListener onSelection = e -> {
        if (e.getFirstIndex() == e.getLastIndex()) { // Check if record in table is being selected
            // Display the edit and delete buttons
            this.editButton.setVisible(true);
            this.deleteButton.setVisible(true);
        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        RecordsTablePane = new javax.swing.JScrollPane();
        RecordsTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        dailyProgressBar = new javax.swing.JProgressBar();
        dailyGoalLabel = new javax.swing.JLabel();
        weeklyProgressBar = new javax.swing.JProgressBar();
        weeklyGoalLabel = new javax.swing.JLabel();
        addGoalButton = new javax.swing.JButton();
        editGoalButton = new javax.swing.JButton();
        pointsLabel = new javax.swing.JLabel();
        pointsValueLabel = new javax.swing.JLabel();
        recoordActionLabel = new javax.swing.JLabel();
        goalActionLabel = new javax.swing.JLabel();
        graphButton = new javax.swing.JButton();
        factButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HydroHomie - Main Page");

        MainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Main Page"));
        MainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MainPanelMouseClicked(evt);
            }
        });

        RecordsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date & Time", "Type", "Volume (ml)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        RecordsTablePane.setViewportView(RecordsTable);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        dailyGoalLabel.setText("Daily Goal");

        weeklyGoalLabel.setText("Weekly Goal");

        addGoalButton.setText("Add Goal");
        addGoalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGoalButtonActionPerformed(evt);
            }
        });

        editGoalButton.setText("Edit Goal");
        editGoalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editGoalButtonActionPerformed(evt);
            }
        });

        pointsLabel.setText("Points:");

        pointsValueLabel.setText("0");

        graphButton.setText("Graphs");
        graphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphButtonActionPerformed(evt);
            }
        });

        factButton.setText("Fact");
        factButton.setMaximumSize(new java.awt.Dimension(67, 23));
        factButton.setMinimumSize(new java.awt.Dimension(67, 23));
        factButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addComponent(pointsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pointsValueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(weeklyGoalLabel)
                        .addGap(18, 18, 18)
                        .addComponent(weeklyProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dailyGoalLabel)
                        .addGap(18, 18, 18)
                        .addComponent(dailyProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(RecordsTablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addComponent(addGoalButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editGoalButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(graphButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(factButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(goalActionLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(recoordActionLabel)
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addComponent(editButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dailyProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dailyGoalLabel)
                    .addComponent(weeklyProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(weeklyGoalLabel)
                        .addComponent(pointsLabel)
                        .addComponent(pointsValueLabel)))
                .addGap(12, 12, 12)
                .addComponent(RecordsTablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addButton)
                        .addComponent(editButton)
                        .addComponent(deleteButton)
                        .addComponent(addGoalButton)
                        .addComponent(editGoalButton)
                        .addComponent(graphButton))
                    .addComponent(factButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recoordActionLabel)
                    .addComponent(goalActionLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Displays an interesting fact about water.
     *
     * @param evt Event triggering the action
     */
    private void factButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_factButtonActionPerformed
        JOptionPane.showMessageDialog(this, "Water is a liquid!", "HydroHome - Fact", INFORMATION_MESSAGE);
    }//GEN-LAST:event_factButtonActionPerformed

    /**
     * Move to the Graph Window
     *
     * @param evt Event triggering the action
     */
    private void graphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphButtonActionPerformed
        new GraphGUI(this).setVisible(true); // Display the graph window
        this.setVisible(false); // Hide the main page window
    }//GEN-LAST:event_graphButtonActionPerformed

    /**
     * Move to the Add Goal window and edit an existing goal.
     *
     * @param evt Event triggering the action
     */
    private void editGoalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editGoalButtonActionPerformed
        new AddGoalGUI(this, true).setVisible(true); // Move to the add goal window, in Edit Mode
        this.setVisible(false); // Hide the main page window
    }//GEN-LAST:event_editGoalButtonActionPerformed

    /**
     * Move to the Add Goal window to add a new goal.
     *
     * @param evt Event triggering the action
     */
    private void addGoalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGoalButtonActionPerformed
        new AddGoalGUI(this).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_addGoalButtonActionPerformed

    /**
     * Deletes the selected record from user data and the record table.
     *
     * @param evt Event triggering the action
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int selectedRow = this.RecordsTable.getSelectedRow(); // get the table entry to remove

        Record selectedRecord = this.getSelectedRecord(selectedRow); // get the table entry to remove

        if (selectedRecord == null) { // Check that the record was successfully fetched
            return;
        }
        
        recordsTable.removeRow(selectedRow); // remove record form table
        user.deleteRecord(selectedRecord); // remove record from user data

        // Hide the edit and delete buttons:
        this.editButton.setVisible(false);
        this.deleteButton.setVisible(false);

        this.updateUserData(); // Update user data to reflect the deletion
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * Move to the Add Record window to edit an existing record.
     * @param evt Event triggering the action
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        int selectedRow = this.RecordsTable.convertRowIndexToModel(this.RecordsTable.getSelectedRow()); // get the table entry to remove
        Record selectedRecord = this.getSelectedRecord(selectedRow); // get the table entry to remove

        if (!validateRecord(selectedRecord)) { // Check that the record was successfully fetched
            return; 
        }

        new AddRecordGUI(this, selectedRecord).setVisible(true); // Move to the Add record window to edit the selected record
        recordsTable.removeRow(selectedRow); // Remove the record form the table
        user.deleteRecord(selectedRecord); // Remove the record form the user data
        this.setVisible(false); // Hide the main page window

        // Hide the edit and delete buttons:
        this.editButton.setVisible(false);
        this.deleteButton.setVisible(false);
    }//GEN-LAST:event_editButtonActionPerformed

    /**
     * Move to the Add Record window to add a new record.
     * @param evt Event triggering the action
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        new AddRecordGUI(this).setVisible(true); // Open the add record window
        this.setVisible(false); // Hide the main page window
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     *
     * @param evt Event triggering the action
     */
    private void MainPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MainPanelMouseClicked

    }//GEN-LAST:event_MainPanelMouseClicked

    /**
     * Checks if the given record  is null or not, and prints out an error message.
     * @param record The record to be checked
     * @return false if the selected record is null, otherwise true.
     */
    private boolean validateRecord(Record record) {
        boolean validFlag = false; // Flag indicating whether the given record is null or not
        if (record != null) {
            validFlag = true;
            this.recoordActionLabel.setText("");
        } else {
            // If the record is null, print out an error message
            this.recoordActionLabel.setForeground(Color.red);
            this.recoordActionLabel.setText("Error Selecting Record");
        }
        return validFlag;
    }

    /**
     * Gets the record in the given table row.
     *
     * @param selectedRow
     * @return Record in the given row
     */
    private Record getSelectedRecord(int selectedRow) {

        Record selectedRecord = null;

        // Get record values from table:
        try {
            String tableValues[] = {recordsTable.getValueAt(selectedRow, 0).toString(), recordsTable.getValueAt(selectedRow, 1).toString(), recordsTable.getValueAt(selectedRow, 2).toString()};
            selectedRecord = user.getRecord(new SimpleDateFormat("MMM dd yyyy HH:mm").parse(tableValues[0]),
                    LiquidType.valueOf(tableValues[1].toUpperCase()), Float.parseFloat(tableValues[2]));
        } catch (ParseException | ArrayIndexOutOfBoundsException e) {
            System.err.println("Error selecting record.");
        }

        return selectedRecord;
    }

    /**
     * Add a goal to the user with the specified volume.
     *
     * @param volume to be set for the new goal
     * @param type Type of goal, weekly or daily
     */
    public void addGoalToUser(float volume, String type) {
        this.user.addGoal(volume, GoalType.valueOf(type)); // Add goal to the user
        updateUserData(); // Update the user data
    }

    /**
     * Creates an adds a new record with the specified parameters to the table.
     *
     * @param volume Amount for the record
     * @param type Liquid type for the record
     * @param date Date for the record
     */
    public void addRecordToTable(float volume, String type, Date date) {
        // Update progress towards daily goal
        if (user.getCurrentDailyGoal() != null) {
            // Check if daily goal was met
            if (user.getVolumeOverDays(1) + volume > user.getCurrentDailyGoal().getGoal() && !user.getCurrentDailyGoal().isCompleted()) {
                JOptionPane.showMessageDialog(this, "You have been awarded " + user.getCurrentDailyGoal().getPoints() + " points for reaching your goal!.\nCongratulations!", "HydroHomie - Progress Update", INFORMATION_MESSAGE);
            }
        }
        // Update progress towards daily goal
        if (user.currentWeeklyGoal != null) {
            // Check if weekly goal was met
            if (user.getVolumeOverDays(7) + volume > user.currentWeeklyGoal.getGoal() && !user.currentWeeklyGoal.isCompleted()) {
                JOptionPane.showMessageDialog(this, "You have been awarded " + user.currentWeeklyGoal.getPoints() + " points for reaching your goal!.\nCongratulations!", "HydroHomie - Progress Update", INFORMATION_MESSAGE);
            }
        }
        this.user.addRecord(volume, date, type); // Add the record to the user
        updateUserData(); // Update user data to reflect the addition
    }

    /**
     * Add the given record to the records table
     *
     * @param record The record to be added to the table
     */
    public void addRecordToTable(Record record) {
        if (record == null) {
            return;
        }
        this.user.addRecord(record.getVolume(), record.getDate(), record.getType().toString()); // Add record to user
        updateUserData(); // Update user data to reflect the addition
    }

    /**
     * Update user information. 
     * Check goals, update users points, update the record table and write data 
     * to file.
     */
    private void updateUserData() {
        // Iterate through the users records and add them onto the table
        recordsTable.setRowCount(0);
        for (Record r : this.user.records) {
            recordsTable.addRow(new Object[]{new SimpleDateFormat("MMM dd yyyy HH:mm").format(r.getDate()), r.getType().toString(), r.getVolume()});
        }
        
        this.pointsValueLabel.setText(String.valueOf(user.getPoints())); // Updare the users points
        this.checkGoals();// Update progress for goals
        this.user.WriteFile(); // Write user information to the file
    }

    /**
     * Checks and updates the progress toward the daily and weekly goals.
     */
    private void checkGoals() {
            // Update the progerss bar for the daily goal
        if (user.getCurrentDailyGoal() != null) {
            if (user.getCurrentDailyGoal().isCompleted()) { // Check if the goal has been completed
                // Indicate that the goal has been reached
                dailyProgressBar.setBackground(Color.GREEN);
                dailyProgressBar.setStringPainted(true);
                dailyProgressBar.setString("Completed!");
                dailyProgressBar.setValue(100);
            } else {
                // Update the displayed progress
                dailyProgressBar.setString((int) user.getVolumeOverDays(1) + "/" + (int) user.getCurrentDailyGoal().getGoal());
                dailyProgressBar.setStringPainted(true);
                dailyProgressBar.setValue(user.calculateProgress(user.getCurrentDailyGoal(), 1));
            }
        }

        // Update the weekly goal
        if (user.currentWeeklyGoal == null) {
            // If no goal has been set keep the progress at 0
            weeklyProgressBar.setValue(0);
        } else {
            // Update the displayed progress
            weeklyProgressBar.setValue(user.calculateProgress(user.currentWeeklyGoal, 7));
        }
    }

    /**
     * Getter method for the User using the MainPage 
     * @return User using the MainPage
     */
    public UserData getUser() {
        return this.user;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPageGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPageGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPageGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPageGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPageGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MainPanel;
    private javax.swing.JTable RecordsTable;
    private javax.swing.JScrollPane RecordsTablePane;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addGoalButton;
    private javax.swing.JLabel dailyGoalLabel;
    private javax.swing.JProgressBar dailyProgressBar;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JButton editGoalButton;
    private javax.swing.JButton factButton;
    private javax.swing.JLabel goalActionLabel;
    private javax.swing.JButton graphButton;
    private javax.swing.JLabel pointsLabel;
    private javax.swing.JLabel pointsValueLabel;
    private javax.swing.JLabel recoordActionLabel;
    private javax.swing.JLabel weeklyGoalLabel;
    private javax.swing.JProgressBar weeklyProgressBar;
    // End of variables declaration//GEN-END:variables
}
